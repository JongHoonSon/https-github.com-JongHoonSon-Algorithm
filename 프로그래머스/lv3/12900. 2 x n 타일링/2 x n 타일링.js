function solution(n) {
  let memo = new Array(n + 1);

  // 2 x 1 칸을 채우는 경우의 수 : 1 x 2 타일 1개로 채우기
  memo[1] = 1;

  // 2 x 2 칸을 채우는 경우의 수 : 1 x 2 타일 2개 또는 2 x 1 타일 2개
  memo[2] = 2;

  // 3번째 칸부터는 경우의 수는
  // 1칸 전의 경우의 수에 1 x 2 타일 1개 추가하는 경우가 있음
  // 2칸 전의 경우의 수에 2 x 1 타일 2개를 추가하는 경우가 있음
  // (1 x 2 2개를 추가하는 경우는 1칸 전에서 이미 처리됨)
  // 따라서 두 경우의 합이므로
  // memo[i] = memo[i-1] + memo[i-2] 이다.
  for (let i = 3; i <= n; i++) {
    memo[i] = (memo[i - 1] + memo[i - 2]) % 1000000007;
  }

  return memo[n];
}

// 문제 풀이 접근 방식

// 백준에서도 존재하는 1 x 2 타일링 문제이다.
// DP 기법을 이용해 풀 수 있다.
// 이번 풀이에서는 상향식 방법을 이용해보았다.

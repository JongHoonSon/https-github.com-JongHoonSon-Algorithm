function solution(n, results) {
  var answer = 0;

  // 각 선수가 다른 선수와의 경기에서 이길 수 있는지를 저장하는 2차원 배열
  let canWin = new Array(n + 1);

  // 일단 false로 초기화함
  for (let i = 1; i <= n; i++) {
    canWin[i] = new Array(n + 1).fill(false);
  }

  // results의 정보에 따라 a가 b를 이길 수 있다는 것을
  // canWin[a][b] = true로 처리함
  results.forEach(([a, b]) => {
    canWin[a][b] = true;
  });

  // 3중 반복문을 통해
  // 선수들을 3명씩 모든 경우의수에 대해 전적 비교함
  for (var i = 1; i <= n; i++) {
    for (var j = 1; j <= n; j++) {
      for (var k = 1; k <= n; k++) {
        // j가 i를 이겼고,
        // i가 k를 이겼다면
        // (= 실력이 j > i > k 순)
        if (canWin[j][i] && canWin[i][k]) {
          // j는 k가 이길 수 있음
          // (각 선수의 능력치가 고정됨)
          canWin[j][k] = true;
        }
      }
    }
  }

  // 2중 반복문을 통해
  // i와 j를 반복
  // i : 순위를 매길 수 있는지 확인할 선수
  // j : 나머지 선수

  // i와 j의 경기 중에서 경기 결과를 예측할 수 있는 경기가 있다면
  // (= canWin[i][j]나 canWin[j][i] 가 true라면)
  // 해당 경기들의 수를 cnt에 카운트함
  for (let i = 1; i <= n; i++) {
    let cnt = 0;
    for (let j = 1; j <= n; j++) {
      if (canWin[i][j] || canWin[j][i]) {
        cnt++;
      }
    }

    // 만약 cnt가 n-1이면, 즉 본인을 제외한 모든 선수와의 경기 결과를 예측할 수 있다면
    // 해당 선수 i는 순위를 매길 수 있으므로
    if (cnt === n - 1) {
      // 순위를 매길 수 있는 선수의 수를 저장하는 answer을 ++ 함
      answer++;
    }
  }
  return answer;
}

// 후기

// 문제 유형이 그래프이길래 DFS, BFS를 이용해서 푸는 건가 싶었지만,
// 아무리 생각을 해도 DFS, BFS와는 관련이 없을 것이라 생각하였다.
// 문제에서 주어진 입출력 예도 1개 밖에 존재하지 않아 어떤 경우까지 고려해야할지 막막하였고,
// 결국 구글링을 통해 문제 풀이 방식을 찾아보았다.

// 문제를 풀기 위해 접근하는 아이디어 방식은 비슷했으나, 구현 방식의 약간의 차이가 있었다.
// 그중 가장 명확하게 문제를 풀이하는 것 같은 3중 반복문을 이용한 풀이를 정리해보았다.
// 3중 반복문이 가능한 이유는 선수의 수가 100명이기때문에 100x100x100 으로
// 최대 반복 횟수가 1000000번(백만번)이기 때문이다.

// 만약 선수의 수가 높았다면, 다른 풀이 방식인 플로이드 와샬 알고리즘을 이용해야 할 것 같다.
// (자세히 알아보진 않았다.)

// 문제 풀이 접근 방식

// 이 문제에서는 주어진 경기결과를 바탕으로 각 선수들을 중에서 순위를 매길 수 있는 선수를 찾는 것인데,
// 순위를 매길 수 있는지의 여부는, 다음과 같은 방법으로 찾을 수 있다.

// 선수 i : 본인
// 선수 j : 본인과 상대한 선수
// 선수 k : 본인과 상대한 선수 j와 상대한 선수

// 선수 i와 상대한 선수 j의 수와
// 선수 i와 상대하지 않은 선수(n에서 j 제외)들 중에서
// j와 경기한 적이 있는 선수 k가 있다면

// 그래서 결국 선수 i와 나머지 선수들의 경기 결과를 간접적으로 예상할 수 있다면
// 그 선수는 순위를 매길 수 있다는 점을 이용해서 문제를 풀 수 있다.

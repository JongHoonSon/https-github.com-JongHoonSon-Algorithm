3레벨 문제 최상위 난이도에 해당하는 것 같다
문제를 푸는데 4시간이 걸렸지만, 결국 기본으로 주어지는 테스트케이스를 1개 풀지 못하였다.

문제에서 해결하지 못한 부분은 다음 예상 이동경로를 판단해서 이전 경로 중에 효율적인 것을 선택해야한다.
나는 그리디 방식으로 풀면 된다고 생각하여 BFS를 사용했지만,
알고보니 2차원 배열 상에서 풀어야하는 DP 문제였다.

현재 구글링을 해보아도 테스트케이스 25개를 모두 통과하는 JS 답은 보이지 않는 것 같다.
비록 문제는 풀지 못했지만, BFS의 한계 어떤 점을 구현하는데 부족한 알고리즘인지 알 수 있었다.

문제에서 풀지 못한 부분은 다음과 같다.

(0,0) 부터 경주로 건설을 시작했을 때
(0,1) 또는 (1,0) 을 지나가야 한다.

그리고 다음에 방문해야하는 곳은 (1,1) 이고,
(1,1)에서는 (1,2)로만 이동할 수 있다고 할 때,
(0,0) -> (1,0) -> (1,1) -> (1,2)의 경로는 순서대로 경주로 건설 비용이 100, 600, 100이 드는 반면 
(0,0) -> (0,1) -> (1,1) -> (1,2)의 경로는 순서대로 경주로 건설 비용이 100, 600, 600이 든다. 코너가 두번 만들어지기 때문이다.

여기서 내가 구현하지 못한 부분은 (0,0)에서 (0,1) 또는 (1,0)으로 이동하는 비용은 둘 다 마찬가지로 100인데
이 경우 어떤 길을 택하는 것이 효율적인지 계산하는 부분이다.

실제로 (0,1) 또는 (1,0) 에서 이동할 수 있는 (1,1)에서 이동할 수 있는 (1,2)를 찾아야 (0,1)을 택할지 (1,0)을 택할지를 알 수 있다.
이 부분을 구현하기 위해 DP가 필요하고, DP 중에서도 2차원 배열 상에서 쓰기 때문에 복잡한 로직이 될 것이라 생각한다.
const fs = require("fs");
let input = fs.readFileSync("./dev/stdin").toString();

input = +input;
answer = 0;

// input이 5 이상이면 반복
while (input >= 5) {
  // N의 값을 5로 나눈 몫을 answer에 plus 함
  // (밑의 1번에서 설명한 N의 값이 5씩 증가할 때 마다
  // 0의 갯수가 1씩 증가하는 것을 계산하기 위함)
  answer += parseInt(input / 5);

  // N의 값을 5로 나눔
  // (밑의 2번에서 설명한 N의 값이 5^n씩 증가할 때 마다
  // 0의 갯수가 1씩 추가로 증가하는 것을 계산하기 위함)
  input /= 5;
}
console.log(answer);

// 문제 풀이 접근 방식

// 문제에서 N의 범위가 0이상 500이하이기 때문에
// 500 팩토리얼은 BigInt의 범위도 벗어나는 Infinity 값이다.
// 따라서 팩토리얼의 값을 직접 계산한 후 뒤에서부터 0의 갯수를 세는 것은 불가능하다.

// 이 문제를 풀기 위해서는 팩토리얼 중에 알아야 하는 것이 있는데,

// N 팩토리얼의 값에서 뒤에 0의 갯수가

// 1. N 팩토리얼의 N의 값이 5씩 증가할 때 마다 1씩 증가한다는 것이다.
// 2. N 팩토리얼의 N의 값이 5^n씩 증가할 때 마다 1씩 추가로 증가한다는 것이다.

// 실제로 N 팩토리얼을 보면 다음과 같다.

// 1! = 1
// 2! = 2
// 3! = 6
// 4! = 24
// 5! = 120   <- 0 1개

// 6! = 720
// ...
// 10! = 3628800    <- 0 2개

// 11! = 39916800
// ...
// 15! = 1307674368000    <- 0 3개

// 16! = ...000
// ...
// 20! = ...0000    <- 0 4개

// 21! = ...0000
// ...
// 25! = ...000000    <- 0 5개 (n^2 때문에 1개 추가로 증가)

// 이렇게 나타난다.

// 따라서 문제로 주어진 N의 갯수를 5로 나눈 수가
// N 팩토리얼의 값에서 뒤에 0의 갯수가 된다.

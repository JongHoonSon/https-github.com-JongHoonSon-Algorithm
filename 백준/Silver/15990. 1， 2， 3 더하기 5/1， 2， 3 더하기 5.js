const fs = require("fs");
let input = fs.readFileSync("./dev/stdin").toString().trim().split("\n");

const testCaseNum = +input.shift();

// console.log(input);

// 0부터 3까지 만들 수 있는 경우의 수에서
// 마지막에 끝나는 자리를 기록함 (연속된 번호를 붙히면 안되기 때문)
let D = [
  // 0은 1, 2, 3으로 끝나는 경우가 없음
  [0, 0, 0],

  // 1은 1로 끝나는 경우만 존재
  [1, 0, 0],

  // 2는 2로 끝나는 경우만 존재 (1+1은 연속적이라 안됨)
  [0, 1, 0],

  // 3은 1로 끝나는 경우, 2로 끝나는 경우, 3으로 끝나는 경우가 1개씩 존재
  // (2+1, 1+2, 3)
  [1, 1, 1],
];

// 10만 이하의 수에 대해, 각 수를 만들 수 있는 방법의 수를 계산하여 저장
for (let i = 4; i <= 100001; i++) {
  // i번째 수를 만들 수 있는 방법의 수는
  D[i] = [
    // i-1번째 수를 만들 때 2로 끝난 경우, 3으로 끝난 방법의 수에서
    // 1을 더하여 만드는 경우
    (D[i - 1][1] + D[i - 1][2]) % 1000000009,

    // i-2번째 수를 만들 때 1로 끝난 경우, 3으로 끝난 방법의 수에서
    // 2를 더하여 만드는 경우
    (D[i - 2][0] + D[i - 2][2]) % 1000000009,

    // i-3번째 수를 만들 때 1로 끝난 경우, 2으로 끝난 방법의 수에서
    // 3을 더하여 만드는 경우
    (D[i - 3][0] + D[i - 3][1]) % 1000000009,
  ];
  // console.log(D[i]);
}

// element를 만들 때
// 1로 끝나는 경우, 2로 끝나는 경우, 3으로 끝나는 경우의 수를 모두 더한 것이 답이 됨
input.forEach((element) => {
  // console.log(element);
  console.log((D[+element][0] + D[+element][1] + D[+element][2]) % 1000000009);
});
